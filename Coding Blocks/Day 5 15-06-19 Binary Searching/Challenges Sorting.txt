//Bubble Sort

#include<iostream>
#include <bits/stdc++.h>
using namespace std;

void bubble_sort(int *a, int n)
{
    if(n==1)
    {
        return;
    }
    else
    {
        for(int i=1; i<n; i++)
        {
            if(a[i-1]>=a[i])
            {
                swap(a[i-1] , a[i]);
            }
        }
        bubble_sort(a, n-1);

    }
}

int main() 
{
    int n;
    cin>>n;
    int arr[n];
    for(int i=0; i<n; i++)
    {
        cin>>arr[i];
    }
    bubble_sort(arr, n);
    for(int i=0; i<n; i++)
    {
        cout<<arr[i]<<endl;
    }
	return 0;
}

************************************************************************

//Selection Sort
#include<istream>
#include<bits/stdc++.h>
using namespace std;

void selection_sort(int *us, int n)
{
    if(n==1)
    {
        return;
    }
    int min = us[0];
    int index = 0;
    for(int i=1; i<n; i++)
    {
        if(us[i]<min)
        {
            min = us[i];
            index = i;
        }
    }
    swap(us[0], us[index]);
    selection_sort(us+1, n-1);
}
int main()
{
	int n;
	cin>>n;
	int unsorted[n];
	for(int i=0;i<n;i++)
	{
		cin>>unsorted[i];
	}
	selection_sort(unsorted, n);
	for(int i=0;i<n;i++)
	{
		cout<<unsorted[i]<<endl;
	}
	return 0;
}

************************************************************************

//Insertion Sort
#include <iostream>
#include<bits/stdc++.h>
using namespace std;

void insertion_sort(int *a, int n1, int n)
{
    if(n1==n)
    {
        return;
    }
    for(int i = n1; i>=0; i--)
    {
        if(a[i-1] > a[i])
        {
            swap(a[i-1] , a[i]);
        }
        else
        {
            break;
        }
    }

    insertion_sort(a, n1+1, n);
}

int main() 
{
    int n;
    cin>>n;
    int arr[n];
    for(int i=0;i<n;i++)
    {
        cin>>arr[i];
    }
    insertion_sort(arr , 1, n);
    for(int i=0;i<n;i++)
    {
        cout<<arr[i]<<endl;
    }
    return 0;
}

************************************************************************

//Sorting array with 0,1,2 only in linear time
#include <iostream>
#include<bits/stdc++.h>
using namespace std;

int main() 
{
    int n;
    cin>>n;
    int arr[n];
    for(int i=0;i<n;i++)
    {
        cin>>arr[i];
    }
    
    int l=0;
    int m=0;
    int h = n-1;
    while(m<=h)
    {
        if(arr[m] == 0)
        {
            swap(arr[m] , arr[l]);
            l++;
            m++;
        }
        else if(arr[m] == 1)
        {
            m++;
        }
        else
        {
            swap(arr[m] , arr[h]);
            h--;
        }
    }

    for(int i=0;i<n;i++)
    {
        cout<<arr[i]<<endl;
    }
    return 0;
}

************************************************************************

//Sort all the strings ( lexicographically ) but if a string is present completely as a prefix in another string, then string with longer length should come first. Eg bat, batman are 2 strings and the string bat is present as a prefix in Batman - then sorted order should have - Batman, bat.

#include <iostream>
#include<bits/stdc++.h>
#include<math.h>
using namespace std;

bool compare(string s1, string s2)
{   
    if(s1.length() < s2.length())
    {
        if(s1 == s2.substr(0, s1.length()))
            return false;
    }
    else if(s1.length() >= s2.length())
    {
        if(s2 == s1.substr(0, s2.length()))
            return true;        
    }
    return s1<s2;
}

int main()
{
    vector<string> v;
    int n;
    cin>>n;
    for(int i=0; i<n; i++)
    {
        string a;
        cin>>a;
        v.push_back(a);
    }
    sort(v.begin(), v.end(), compare);
    for(auto i:v)
    {
        cout<<i<<endl;
    }
    return 0;
}

************************************************************************

//arrange the list in such a manner that the list is sorted in decreasing order of salary. And if two employees have the same salary, they should be arranged in lexicographical manner such that the list contains only names of those employees having salary greater than or equal to a given number x.

#include <iostream>
#include<bits/stdc++.h>
using namespace std;

bool compare(pair<string, int> p1, pair<string, int> p2)
{
    if(p1.second == p2.second)
    {
        return p1.first < p2.first;
    }
    return p1.second > p2.second;
}

int main() 
{
    int min_salary;
    cin>>min_salary;
    int n;
    cin>>n;
    vector<pair<string, int> > v;
    for(int i= 0; i<n ;i++)
    {
        int salary;
        string name;
        cin>>name>>salary;
        v.push_back(make_pair(name, salary));
    }
    sort(v.begin(), v.end(), compare);

    for(int i=0; i<n; i++)
    {
        if(v[i].second >= min_salary)
        {
            cout<<v[i].first<<" "<<v[i].second<<endl;
        }
        
    }
}

************************************************************************

//Grand Temple
//A religious king wants to build the largest temple in his kingdom . To build the largest temple he needs to find the area of the largest suitable land . Given co-ordinates which denotes rivers flowing through the point horizontally as well as vertically , find the largest area possible to make the grand temple. 


#include <iostream>
#include<bits/stdc++.h>
using namespace std;

bool compare1(pair<int, int> p1, pair<int, int> p2)
{
    return p1.first < p2.first;
}

bool compare2(pair<int, int> p1, pair<int, int> p2)
{
    return p1.second < p2.second;
}

int main() 
{
    int n;
    cin>>n;
    vector<pair<int, int> > v;
    for(int i=0; i<n; i++)
    {
        int int1, int2;
        cin>>int1>>int2;
        v.push_back(make_pair(int1, int2));
    }
    sort (v.begin() , v.end(), compare1);
    int max1 =0;
    for(int i=0; i<n-1; i++)
    {
        int diff = v[i+1].first - v[i].first - 1;
        if(diff>max1)
        max1 = diff;
    }
    sort (v.begin() , v.end(), compare2);
    int max2 =0;
    for(int i=0; i<n-1; i++)
    {
        int diff = v[i+1].second - v[i].second - 1;
        if(diff>max2)
        max2 = diff;
    }
    cout<<max1*max2;
    return 0;
}

************************************************************************

//Array Binary Search
#include <iostream>
#include<bits/stdc++.h>
using namespace std;

int searching(int *a, int n1, int n, int m, int index)
{
    if(n1==0)
    {
        return -1;
    }
    if(a[0] == m)
    {
        index = n-n1;
        return index;
    }
    else
    {
        return searching(a+1, n1-1, n, m, index);
    }
}

int main() 
{
    int index = -1;
    int n,m;
    cin>>n;
    int arr[n];
    for(int i=0;i<n;i++)
    {
        cin>>arr[i];
    }
    cin>>m;
    cout<<searching(arr, n, n, m, index);
    return 0;
}

************************************************************************

//Array Binary Search
#include <iostream>
using namespace std;

int binary_search(int *a, int n, int key)
{
    int s=0;
    int e = n-1;
    int ans =-1;
    while(s<=e)
    {
        int mid = (s+e)/2;
        if(a[mid]==key)
        {
            return mid;
        }
        else if(a[mid]>key)
        {
            e=mid-1;
        }
        else{
            s=mid+1;
        }
    }
    return ans;
}

int main() 
{
    int n;
    cin>>n;
    int arr[n];
    for(int i=0; i<n;i++)
    {
        cin>>arr[i];
    }
    int m;
    cin>>m;
    cout<<binary_search(arr, n, m);
}

************************************************************************

//Kth Root

#include <iostream>
#include<math.h>
using namespace std;

int kth_root( long long int n, int k)
{
    int s=0;
    long long int e=n;
    int ans = 0;
    while(s<=e)
    {
        long long int mid = (s+e)/2;
        if(pow(mid,k) <= n)
        {
            ans = mid;
            s = mid+1;
        }
        else
        {
            e = mid - 1;
        } 
    }
    return ans; 
}

int main() 
{
    int t;
    cin>>t;
    for(int i=0; i<t;i++)
    {
        long long int n;
        int k;
        cin>>n>>k;
        cout<<kth_root(n,k)<<endl;
    }
}

************************************************************************

//Winning CB Scholarship Problem(Hacker Blocks)

#include <iostream>
using namespace std;

int main() 
{
    long long int n,m,x,y;
    cin>>n>>m>>x>>y;
    
    long long int s=0;
    long long int e= n;
    long long int ans = 0;
    while(s<=e)
    {
            long long int mid = (s+e)/2;
            if((mid*x) == m)
            {
                ans = mid;
                s = mid +1;
            }
            else if((mid*x) < m)
            {
                ans = mid;
                s = mid + 1;
            }
            else
            {
                long long int req_coupons = (mid*x) -m;
                long long int produced_coupons = (n-mid)*y;
                if(produced_coupons >= req_coupons)
                {
                    ans = mid;
                    s = mid+1;
                }
                else
                {
                    e = mid -1;
                }
            }    
    }
    cout<<ans;
}

************************************************************************

//Find Upper and Lower bound

#include <iostream>
using namespace std;

int first_occ(int *a, int n, int key)
{
    int s = 0;
    int e = n;
    int ans = -1;
    while(s<=e)
    {
        int mid = (s+e)/2;
        if(a[mid] == key)
        {
            ans = mid;
            e= mid-1;
        }
        else if(a[mid] > key)
        {
            e = mid-1;
        }
        else
        {
            s= mid +1;
        }
    }
    return ans;
}

int last_occ(int *a, int n, int key)
{
    int s = 0;
    int e = n;
    int ans = -1;
    while(s<=e)
    {
        int mid = (s+e)/2;
        if(a[mid] == key)
        {
            ans = mid;
            s= mid+1;
        }
        else if(a[mid] > key)
        {
            e = mid-1;
        }
        else
        {
            s= mid +1;
        }
    }
    return ans;
}

int main() 
{
    int n;
    cin>>n;
    int arr[n];
    for(int i=0;i<n;i++)
    {
        cin>>arr[i];
    }
    int t;
    cin>>t;
    for (int j=0;j<t;j++)
    {
        int key;
        cin>>key;
        cout<<first_occ(arr, n, key)<<" "<<last_occ(arr, n, key)<<endl;
    }
    return 0;
}

************************************************************************

//Help Rahul To search
//Searching in Rotated array

#include <iostream>
using namespace std;

int binary_search(int *a, int n, int key)
{
    int s= 0;
    int e = n-1;
    int ans = -1;
    while(s<=e)
    {
        int mid = (s+e)/2;
        if(a[mid] == key )
        {
            ans = mid;
            return ans;
        }
        else if(a[mid]>key)
        {
            e = mid-1;
        }
        else
        {
            s=mid+1;
        }
    }
    return ans;
}

int main() 
{
    int n;
    cin>>n;
    int arr[n];
    for(int i=0; i<n;i++)
    {
        cin>>arr[i];
    }
    int key;
    cin>>key;
    int max_index = 0;
    while(arr[max_index]<=arr[max_index+1])
    {
        max_index++;
    }
    int req_index = n;
    int binary1 = binary_search(arr,max_index+1, key);
    int binary2 = binary_search((arr+max_index+1),(n - (max_index + 1)), key);
    if(binary1 != -1)
    {
        cout<<binary1<<endl;
    }
    if(binary2 != -1)
    {
        cout<< (binary2+ max_index+1)<<endl;
    }
    if(binary1 == -1 and binary2 == -1)
    {
        cout<<binary1<<endl;
    }

}

************************************************************************

//Aggressive Cows
#include<iostream>
using namespace std;

void bubble_sort(int *a, int n)
{
    if(n==1)
    {
        return;
    }
    else
    {
        for(int i=1; i<n; i++)
        {
            if(a[i-1]>=a[i])
            {
                swap(a[i-1] , a[i]);
            }
        }
        bubble_sort(a, n-1);

    }
}

bool canPlace(int n,int *stalls,int C,int sep){

	int cows_placed =1;
	int last_placed_cow = stalls[0];
	//remaining stalls 
	for(int i=1;i<n;i++)
	{
		int c_stall = stalls[i];
		if(c_stall-last_placed_cow>=sep)
		{
			cows_placed++;
			last_placed_cow = c_stall;
			if(cows_placed==C)
			{
				return true;
			}
		}
	}
	return false;
}

int main()
{   
    int n;
    cin>>n;
    int cows;
    cin>>cows;
	int stalls[n];
    for(int i=0;i<n;i++)
    {
        cin>>stalls[i];
    }
    bubble_sort(stalls, n);
	int s=0;
	int e = stalls[n-1] - stalls[0];
	int ans = 0;
	while(s<=e){
		int mid = (s+e)/2;
		if(canPlace(n,stalls,cows,mid)){
			ans = mid;
			s = mid+1;
		}
		else{
			e = mid-1;
		}

	}
	cout<<ans<<endl;
	return 0;
}

************************************************************************

//Painter problem
#include <iostream>
using namespace std;

bool canPaint(int *a, int n, int k, int mid, int max)
{   if(max>mid)
    {
        return false;
    }
    int x=0;

    int i=0;
    while(i<n)
    {   
        int sum1=0;
        while(sum1<=mid)
        {
            sum1 =sum1+a[i];
            i++;   
        }
        i--;
        x++;
    }
    
    if(x<=k)
    {
        return true;
    }
    else
    {
        return false;
    }
}

int main() 
{
    int n,k;
    long int t;
    cin>>n>>k>>t;
    int arr[n];
    int sum=0;
    int max =0;
    for(int i=0; i<n;i++)
    {
        cin>>arr[i];
        sum = sum + arr[i];
        if(max<arr[i])
        {
            max = arr[i];
        }
    }
    int s =0;
    int e = sum;
    int ans = 0;
    while(s<=e)
    {
        int mid = (s+e)/2;
        if(canPaint(arr,n,k,mid,max) == 1)
        {
            ans = mid;
            e=mid-1;
        }
        else
        {
            s=mid+1;
        }
    }
   cout<<((ans*t)%10000003);
}

************************************************************************

//Book Allocation Problem
#include <iostream>
using namespace std;

bool canallot(int *a, int n, int k, int mid, int max)
{   if(max>mid)
    {
        return false;
    }
    int x=0;

    int i=0;
    while(i<n)
    {   
        int sum1=0;
        while(sum1<=mid)
        {
            sum1 =sum1+a[i];
            i++;   
        }
        i--;
        x++;
    }
    
    if(x<=k)
    {
        return true;
    }
    else
    {
        return false;
    }
}

int main() 
{
    int t;
    cin>>t;
    for(int j=0;j<t;j++)
    {
        int n,k;
        cin>>n>>k;
        int arr[n];
        int sum=0;
        int max =0;
        for(int i=0; i<n;i++)
        {
            cin>>arr[i];
            sum = sum + arr[i];
            if(max<arr[i])
            {
                max = arr[i];
            }
        }
        int s =0;
        int e = sum;
        int ans = 0;
        while(s<=e)
        {
            int mid = (s+e)/2;
            if(canallot(arr,n,k,mid,max) == 1)
            {
                ans = mid;
                e=mid-1;
            }
            else
            {
                s=mid+1;
            }
        }
        cout<<ans<<endl;
    }
}

************************************************************************

//Counting Sort

