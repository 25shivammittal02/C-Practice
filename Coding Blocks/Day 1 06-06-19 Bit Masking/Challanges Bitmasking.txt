//Q queries each query containing two integers a and b. Your task is to count the no of set-bits in for all numbers between a and b (both inclusive)


#include<iostream>
using namespace std;

int bitcount(int a)
{
    int ans = 0;
    while(a>0)
    {
        ans = ans + (a&1);
        a = a>>1;
    }
    return ans;
}

int main() 
{
	int q;
	cin>>q;
    for(int i =0; i<q; i++)
    {
        int a,b,sum=0;
        cin>>a>>b;
        for(int j=a; j<=b; j++)
        {
            sum = sum + (bitcount(j)); 
        }
        cout<<sum<<endl;
    }

	return 0;
}

----------------------------------------------------------

//We are given an array containg n numbers. All the numbers are present twice except for one number which is only present once. Find the unique number without taking any extra spaces and in linear time. ( Hint - Use Bitwise )


#include<iostream>
using namespace std;
int main() 
{
    int n,a;
    int unique=0;
    cin>>n;
    
    for(int i=0; i<n; i++)
    {
        cin>>a;
        unique = unique^a;
    }
    cout<<unique<<endl;
	return 0;
}

----------------------------------------------------------

//We are given two coins of value x and y. We have to find the maximum of value of a XOR b where x <= a <= b <= y.


#include<iostream>
using namespace std;
int main() 
{
    int x,y;
    cin>>x>>y;
    int max_xor=0;
    for(int i=x; i<y; i++)
    {   
        int x_or;
        for(int j=x+1; j<=y; j++)
        {
            x_or = i^j;
            if(x_or > max_xor)
            {
                max_xor = x_or;
            }
        }
    }
    cout<<max_xor<<endl;
	return 0;
}

----------------------------------------------------------

//count number of 1s in binary representation of an intege


#include<iostream>
using namespace std;

int bitcount(int a)
{
    int ans = 0;
    while(a>0)
    {
        ans = ans + (a&1);
        a = a>>1;
    }
    return ans;
}

int main() 
{
    int n,a;
    int count =0;
    cin>>n;
    for(int i=0; i<n; i++)
    {
        cin>>a;
        count = bitcount(a);
        cout<<count<<endl;
    }
}

----------------------------------------------------------

//We are given an array containg n numbers. All the numbers are present twice except for two numbers which are present only once. Find the unique numbers in linear time without using any extra space. ( Hint - Use Bitwise )


#include<iostream>
using namespace std;

int main() 
{
    int n;
    cin>>n;
    int a[n];
    int x_or=0;
    int pos =-1;
    
    for(int i=0; i<n; i++)
    {
        cin>>a[i];
        x_or = x_or^a[i];
    }
    while (x_or>0)
    {
        int b = x_or & 1;
        pos = pos +1; 
        if(b==1)
        {
            break;
        }
        else
        {
            x_or = x_or>>1;
        }
    }
    int x_or1=0;
    for(int i = 0; i<n; i++)
    {
        if(((a[i]>>pos) & 1) == 1)
        {
            x_or1 = x_or1^a[i];
        }
    }
    int x_or2=0;
    x_or2 = x_or ^ x_or1;
    cout<<x_or2<<endl<<x_or1<<endl;
    return 0;
}

----------------------------------------------------------

//We are given an array containg n numbers. All the numbers are present thrice except for one number which is only present once. Find the unique number. Only use - bitwise operators, and no extra space.


#include<iostream>
#include<math.h>
using namespace std;

int main() 
{
    int n;
    int x=0;
    cin>>n;
    int a[n];
    
    for(int i=0; i<n; i++)
    {
        cin>>a[i];
    }
    for(int j=0; j<32; j++)
    {
        int sum = 0;
        for(int i=0; i<n; i++)
        {
            sum = sum + ((a[i]>>j) & 1);
        }
        x = x+ ((sum % 3) * pow(2,j));
    }
    cout<<x;
    return 0;
}

============

#include <iostream>
#include<cstdlib>
#include<math.h>
using namespace std;
int main()
{
	
	int n;
	cin>>n;
	int*a=(int*)malloc(n*sizeof(int));
	int b[32]={0};
	int sum=0;
	for(int i=0;i<n;i++)
	{
		cin>>a[i];
	}
	
	for(int k=0;k<n;k++)
	{
		for(int j=0;j<32;j++)
		{
			b[j]=b[j]+((a[k]>>j)&1);
		}
	}
	
	for(int i=0;i<32;i++)
	{
		sum=sum+(b[i]%3)*pow(2,i);
		
	}
	cout<<sum;
}

----------------------------------------------------------

//Hulk, because of his incredible jumping ability can take jumps in power of 2. In order to defeat the enemy as quickly as possible he has to reach the Nth step in minimum moves possible. Help Hulk to find the same and contribute in saving the Mother Earth.


#include<iostream>
using namespace std;

int main() 
{
    int n,a;
    cin>>n;
    for(int i = 0; i<n; i++)
    {
        cin>>a;
        cout<<__builtin_popcount(a)<<endl; 
    }
    return 0;
}