//Generate valid Parenthesis
//Sheru + Me
#include<iostream>
#include<bits/stdc++.h>
using namespace std;

set<string> set1;
set<string> set2;
string s1 = "()";


void print_valid(int n) {
	if(n<1)
		return;
	if(n==1) {
		return;
	}
	else {
		for(auto i:set1)
		{
			set2.insert("()"+i);
			set2.insert("("+i+")");
			for(int j=1;j<i.length()-1;j++) {
				string temp = i.substr(0,j+1)+"()" + i.substr(j+1,i.length()-1);
				set2.insert(temp);
			}
			set2.insert(i+"()");
		}
		set1.clear();
		for(auto i:set2) {	
			set1.insert(i);
		}
		set2.clear();
		print_valid(n-1);
	}
}

int main() {
	set1.insert("()");
	int n;
	cin>>n;
	print_valid(n);
	for(auto i : set1)
		cout<<i<<endl;
	cout<<set1.size();
	return 0;
}

-------------------------------------------

//Generate valid Parenthesis
//Sir
#include<iostream>
using namespace std;

void generate_paranthesis(int n,char output[],int i,int open,int close){
	if(i==2*n){
		output[i] ='\0';
		cout<<output<<endl;
		return;
	}
	//rec case 
	if(open<n){
		output[i] = '(';
		generate_paranthesis(n,output,i+1,open+1,close);
	}
	if(close<open){
		output[i] = ')';
		generate_paranthesis(n,output,i+1,open,close+1);
	}
}

int main(){

	int n;
	cin>>n;
	char output[100];
	generate_paranthesis(n,output,0,0,0);

	return 0;
}

-------------------------------------------


//Sudoku Solver
#include<iostream>
using namespace std;

bool canPlace(int a[][10],int i,int j,int no,int n){
	//row col
	for(int x=0;x<n;x++){
		if(a[x][j]==no or a[i][x]==no){
			return false;
		}
	}
	//subgrid
	int sx = 3*(i/3);
	int sy = 3*(j/3);

	for(int x=sx;x<sx+3;x++){
		for(int y=sy;y<sy+3;y++){
			if(a[x][y]==no){
				return false;
			}
		}
	}
	return true;
}

bool solveSudoku(int a[][10],int i,int j,int n){
	//base case
	if(i==n){
		//print the matrix
		return true;
	}
	//corner cases
	if(j==n){
		return solveSudoku(a,i+1,0,n);
	}
	if(a[i][j]!=0){
		return solveSudoku(a,i,j+1,n);
	}
	//rec case 
	for(int k=1;k<=n;k++){
		if(canPlace(a,i,j,k,n)){
			a[i][j] = k;
			bool aageKaSolveHua = solveSudoku(a,i,j+1,n);
			if(aageKaSolveHua){
				return true;
			}
		}
	}

	a[i][j] = 0; //backtracking
	return false;
}


int main(){
	int n=9;
	int a[10][10];

	for(int i=0;i<n;i++){
		for(int j=0;j<n;j++){
			cin>>a[i][j];
		}
	}
	solveSudoku(a,0,0,9);
	
	//Print Matrix!
	for(int i=0;i<n;i++){
		for(int j=0;j<n;j++){
			cout<<a[i][j]<<" ";
		}
		cout<<endl;
	}




	return 0;
}

-------------------------------------------


//n-Knights



-------------------------------------------

*****************************
BINARY SEARCH->
when there is monotonic search space. (jiska graph monotonic hai, non decreasing or non increasing throughoit the search space)
-------------------------------------------

//given sorted array with repeating elements, print first occurence using binary search

#include <iostream>
using namespace std;

int first_binary_search(int *a, int n, int key)
{
    int s=0;
    int e = n-1;
    int ans =-1;
    while(s<=e)
    {
        int mid = (s+e)/2;
        if(a[mid]==key)
        {
            ans = mid;
            e= mid-1;
        }
        else if(a[mid]>key)
        {
            e=mid-1;
        }
        else{
            s=mid+1;
        }
    }
    return ans;
}

int main() 
{
    int n;
    cin>>n;
    int arr[n];
    for(int i=0; i<n;i++)
    {
        cin>>arr[i];
    }
    cout<<first_binary_search(arr, n, 2);
}

----------------------------------------

//SquareRoot
#include <iostream>
using namespace std;

int square_root(int n)
{
    int s=0;
    int e = n;
    while(s<=e)
    {
        int mid = (s+e)/2;
        if((mid*mid)==n)
        {
            return mid;
        }
        else if((mid*mid)>n)
        {
            e=mid-1;
        }
        else{
            s=mid+1;
        }
    }
    return s-1;
}

int main() 
{
    int n;
    cin>>n;
    cout<<square_root(n);
}

---------------------------------------------

//SquareRoot upto p precision
#include<iostream>
using namespace std;

float squareRoot(int n,int p){
	int s = 0;
	int e = n;
	float ans = 0;
	while(s<=e){
		int mid = (s+e)/2;

		if(mid*mid==n){
			return mid;
		}
		else if(mid*mid<=n){
			ans = mid;
			s = mid + 1;
		}
		else{
			e = mid - 1;
		}

	}
	//---->float 
	float inc = 0.1;
	for(int times=1;times<=p;times++){
		while(ans*ans<=n){
			ans += inc;
		}
		ans = ans - inc;
		inc = inc/10;
	}
	return ans;
}


int main(){

	int n;
	int p;
	cin>>n>>p;
	cout<<squareRoot(n,p);

	return 0;
}

---------------------------------------------

//Aggressive Cows
#include<iostream>
using namespace std;

bool canPlace(int n,int *stalls,int C,int sep){

	int cows_placed =1;
	int last_placed_cow = stalls[0];
	//remaining stalls 
	for(int i=1;i<n;i++)
	{
		int c_stall = stalls[i];
		if(c_stall-last_placed_cow>=sep)
		{
			cows_placed++;
			last_placed_cow = c_stall;
			if(cows_placed==C)
			{
				return true;
			}
		}
	}
	return false;
}

int main(){
	int n=5;
	int stalls[] = {1,2,4,8,9}; //sort 
	int cows = 3;

	int s=0;
	int e = stalls[n-1] - stalls[0];
	int ans = 0;
	while(s<=e){
		int mid = (s+e)/2;
		if(canPlace(n,stalls,cows,mid)){
			ans = mid;
			s = mid+1;
		}
		else{
			e = mid-1;
		}

	}
	cout<<ans<<endl;
	return 0;
}
---------------------------------------------

//Parantha Problem(SPOJ)
https://www.spoj.com/problems/PRATA/

#include <iostream>
using namespace std;

bool canMake(int *r, int parata, int n, int mid)
{   
	int cnt = 0;
	for(int i=0; i<n; i++)
	{
        	int time = 0;
        	int j = 1;
        	while(time <= mid)
        	{
        	    time = time + (r[i]*j);
        	    j = j+1;
        	    cnt++;
        	}
        	cnt--;
    	}
    	if(cnt >= parata)
    	{
    	    return true;
    	}
    	else
    	{
    	    return false;
    	}
}

int main() 
{
    	int parata, cook;
    	cin>>parata>>cook;
    	int rank[cook];
    	for(int i=0; i<cook; i++)
    	{
    	    cin>>rank[i];
    	}
    	int s=0;
    	int e= (rank[cook-1]*parata*(parata+1))/2;
    	int ans = e;
    	while(s<=e)
    	{
		int mid = (s+e)/2;
		if(canMake(rank,parata,cook,mid) == 1)
        	{
        	    ans = mid;
		    e=mid-1;
		}
		else
        	{
		    e = mid-1;
        	}
    	}
    	cout<<ans<<endl;
    	return 0;
}


---------------------------------------------

//EKO-EKO Problem(SPOJ)
https://www.spoj.com/problems/EKO/

#include <iostream>
using namespace std;

long long int maximum(long long int *a, long long int n)
{
    long long int max = -1;
    for(long long int i=0; i<n; i++)
    {
        if(a[i]>=max)
        {
            max = a[i];
        }
    }
    return max;
}

bool canCut(long long int *h, long long int req, long long int mid, long long int n)
{   
    long long int sum = 0;
	for(long long int i=0; i<n; i++)
	{
        long long int temp = h[i] -mid;
        if(temp>=0)
        {
            sum = sum +temp;
        }
    }	
    if(sum >= req)
    {
        return true;
    }
    else
    {
        return false;
    }
}

int main() 
{
    long long int n, wood_req;
    cin>>n>>wood_req;
   	long long int height[n];
   	for(long long int i=0; i<n; i++)
   	{
   	    cin>>height[i];
   	}
    long long int s=0;
    long long int e= maximum(height,n);
    long long int ans = e;
    while(s<=e)
    {
	   long long int mid = (s+e)/2;
	    if(canCut(height, wood_req, mid, n) == 1)
        {
            ans = mid;
	        s=mid+1;
	    }
        else
        {
	        e = mid-1;
   	    }
  	}
    cout<<ans<<endl;
    return 0;
}


---------------------------------------------

//Winning CB Scholarship Problem(Hacker Blocks)
#include <iostream>
using namespace std;

int main() 
{
    long long int n,m,x,y;
    cin>>n>>m>>x>>y;
    
    long long int s=0;
    long long int e= n;
    long long int ans = 0;
    while(s<=e)
    {
            long long int mid = (s+e)/2;
            if((mid*x) == m)
            {
                ans = mid;
                break;
            }
            else if((mid*x) < m)
            {
                ans = mid;
                s = mid + 1;
            }
            else
            {
                long long int req_coupons = (mid*x) -m;
                long long int produced_coupons = (n-mid)*y;
                if(produced_coupons >= req_coupons)
                {
                    ans = mid;
                    s = mid+1;
                }
                else
                {
                    e = mid -1;
                }
            }    
    }
    cout<<ans;
}


---------------------------------------------

//