//Permutations
#include <iostream>
using namespace std;

void permutation(char *c, int i)
{
    if(c[i] == '\0')
    {
        cout<<c<<endl;
        return ;
    }
    //Rec Case
    for(int j =i ; c[j] != '\0'; j++)
    {
        swap(c[i], c[j]);
        permutation(c, i+1);
        swap(c[i], c[j]);	//Backtracking used
    }
}

int main() 
{
    char ch[10];
    cin>>ch;
    permutation(ch, 0);
    return 0;
}

------------------------------------------

//Arrange cars according to distance

#include <iostream>
#include<bits/stdc++.h>
using namespace std;

class car
{   
    public:
    int x;
    int y;
    string name;
    car(int a=0,  int b=0,  string t="")
    {
        x=a;
        y=b;
        name=t;
    }
};

bool compare(car c1, car c2)
{
    int d1 = sqrt(pow(c1.x , 2) + pow(c1.y , 2));
    int d2 = sqrt(pow(c2.x , 2) + pow(c2.y , 2));
    return d1<d2;
}

int main() 
{
    vector<car> v1;
    int n;
    cin>>n;
    for(int i=0; i<n; i++)
    {
        string s;
        int x,y;
        cin>>x>>y>>s;
        v1.push_back(car(x,y,s));
    }

    sort(v1.begin(), v1.end(), compare);
    for(auto i:v1)
    {
        cout<<i.x<<" "<<i.y<<" "<<i.name<<endl;
    }
    return 0;
}

-------------------------------------------

//Sorting of string by length else lexicographic sorting
#include <iostream>
#include<bits/stdc++.h>
using namespace std;

bool compare(string s1, string s2)
{
    if(s1.length()!=s2.length())
    {
        return s1.length()<s2.length();
    }
    else
    {
        return s1<s2;
    }
}

int main()
{
    vector<string> v;
    int n;
    cin>>n;
    for(int i=0; i<n; i++)
    {
        string a;
        cin>>a;
        v.push_back(a);
    }

    sort(v.begin(), v.end(), compare);
    for(auto i:v)
    {
        cout<<i<<endl;
    }
    return 0;
}


--------------------------------------
@@@@@@@@@@@@@@@@@@@@@@@@@
//Find a path in maze
#include <iostream>
#include<bits/stdc++.h>
using namespace std;

bool pathExists(char maze[][10] , int i, int j, int n, int m)
{
    if(i==n and j==m)
    return true;
    if(i>m or j>n)
    return false;
    if(maze[i][j]=='X')
    return false;
    
    bool rightside = pathExists(maze, i, j+1, n ,m);
    if (rightside ==1)
    return true;
    
    return pathExists(maze, i+1, j, n, m);
}

int cntpath(char maze[][10] , int i, int j, int n, int m)
{
    if(i==n and j==m)
    return true;
    if(i>m or j>n)
    return false;
    if(maze[i][j]=='X')
    return false;
    
    int total_path = cntpath(maze, i, j+1, n ,m) + cntpath(maze, i+1, j, n ,m);
    return total_path;
}

int main()
{
    char maze[10][10] ={
        "00000" , 
        "00X0X" , 
        "000XX" , 
        "XX000" , 
        "X0X00"};
    cout<<cntpath(maze, 0,0,4,4);
    return 0;
}

--------------------------------------------
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//
#include <iostream>
#include<bits/stdc++.h>
using namespace std;

bool pathExists(char maze[][10] , int i, int j, int n, int m)
{
    if(i==n and j==m)
    return true;
    if(i>m or j>n)
    return false;
    if(maze[i][j]=='X')
    {
        return false;
    }
    bool rightside = pathExists(maze, i, j+1, n ,m);
    if (rightside ==1)
    return true;
    
    return pathExists(maze, i+1, j, n, m);
}

int cntpath(char maze[][10] , int i, int j, int n, int m)
{
    if(i==n and j==m)
    return 1;
    if(i>m or j>n)
    return 0;
    if(maze[i][j]=='X')
    return 0;
    
    int total_path = cntpath(maze, i, j+1, n ,m) + cntpath(maze, i+1, j, n ,m);
    return total_path;
}

void print_path(char maze[][10] , int i, int j, int n, int m)
{
    if(i==n and j==m)
    {
        for(int i=0; i<=n; i++)
        {
            for(int j=0; j<=m; j++)
            {
                cout<<maze[i][j]<<" ";
            }
            cout<<endl;
        }
        maze[i][j] ='0';
        cout<<endl;
        return;
    }
    if(i>m or j>n)
    {
        return;
    }
    if(maze[i][j]=='X')
    return;
    maze[i][j] ='1';
    print_path(maze, i+1, j, n ,m);
    print_path(maze, i, j+1, n ,m);
    maze[i][j] ='0';
}

int main()
{
    char maze[10][10] ={
        "00000" , 
        "00X0X" , 
        "000XX" , 
        "XX000" , 
        "X0X00"};
    print_path(maze, 0,0,4,4);
    return 0;
}

--------------------------------------.

//n-queen Problem


---------------------------------------
//https://www.youtube.com/watch?v=7h1s2SojIRw
//Quick Sort
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
#include <iostream>
using namespace std;

void swap(int* a, int* b) 
{ 
    int t = *a; 
    *a = *b; 
    *b = t; 
}

int partition(int *a, int p, int e)
{
    int pivot = a[p];
    int i = p;
    int j = e;
    while(i<j)
    {
        do
        {
            i++;
        }while(a[i] <= pivot);

        do
        {
            j--;
        }while(a[j] > pivot);

        if(i<j)
        swap(a[i] , a[j]);
    }
    swap(a[p], a[j]);
    return j;
}

void quicksort(int *a , int p, int e)
{
    if(p==e)
    {
        return;
    }

    else if(p<e)
    {
        int j = partition(a , p , e);
        quicksort(a, p, j);
        quicksort(a, j+1, e);
    }
    else
    {
        return;
    }

}

int main() 
{
    int n;
    cin>>n;
    int arr[n];
    for(int i=0; i<n; i++)
    {
        cin>>arr[i];
    }
    quicksort(arr , 0 , n);

    for(int i=0; i<n; i++)
    {
        cout<<arr[i]<<" ";
    }
}

------------------------------------------

//