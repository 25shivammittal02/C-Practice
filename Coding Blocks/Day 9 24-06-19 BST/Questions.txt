//BST
//BST
#include <iostream>
using namespace std;

class node
{
    public:
    int data;
    node *left;
    node *right;
    node (int d)
    {
        data = d;
        left = NULL;
        right = NULL;
    }
};

node *insertInBST(node *root, int d)
{
    if (root==NULL)
    {
        node *n = new node(d);
        return n;
    }
    //insert in left 
    if(d<root->data)
    {
        root->left = insertInBST(root->left, d);
    }
    else
    {
        root->right = insertInBST(root->right, d);
    }
    return root;
}

node *takeinput()
{
    int d;
    cin>>d;
    node *root= NULL;
    while(d!=-1)
    {
        root = insertInBST(root ,d);
        cin>>d;
        
    }
    return root;
}

void printPreorderTree(node *root)
{
    if(root==NULL)
    {
        return;
    }
    cout<<root->data<<" ";
    printPreorderTree(root->left);
    printPreorderTree(root->right);
}

void printInorderTree(node *root)
{
    if(root==NULL)
    {
        return;
    }
    printInorderTree(root->left);
    cout<<root->data<<" ";
    printInorderTree(root->right);
}

void printPostorderTree(node *root)
{
    if(root==NULL)
    {
        return;
    }
    printPostorderTree(root->left);
    printPostorderTree(root->right);
    cout<<root->data<<" ";
}

void printAtLevel(node *root, int k) //O(n)
{
    if(root==NULL) //if a node has no right or no left
    {
        return;
    }
    if(k==0)
    {
        cout<<root->data<<" ";
        return;
    }
    printAtLevel(root->left , k-1);
    printAtLevel(root->right, k-1);
}

int height(node *root) //o(n);
{
    if(root==NULL)
    {
        return 0;
    }
    int h1 = height(root->left);
    int h2 = height(root->right);
    return max(h1,h2) +1;
}

void printlevelwise(node *root) //O(n^2)
{
    int level = height(root);
    for(int i=0; i<level; i++) //O(n)
    {
        printAtLevel(root,i); //O(n)
        cout<<endl;
    }
}

bool search(node *root, int key)
{
    if(root==NULL)
    {
        return false;
    }
    if(root->data == key)
    {
        return true;
    }
    if(key<root->data)
    {
        return search(root->left, key);
    }
    else
    {
        return search(root->right, key);
    }
}

node* deleteANode(node *root, int key)
{
    if(root==NULL)
    {
        return NULL;
    }
    if(root->data == key)
    {
        //delete this node
        if(root->left == NULL and root->right == NULL)
        {
            delete root;
            return NULL;
        }
        else if(root->left !=NULL and root->right == NULL)
        {
            node *temp = root->left;
            delete root;
            return temp;
        }
        else if(root->right !=NULL and root->left == NULL)
        {
            node *temp = root->right;
            delete root;
            return temp;
        }
        else
        {
            node *temp = root->right;
            while(temp->left !=NULL)
            {
                temp = temp->left;
            }
            root->data = temp->data;
            root->right = deleteANode(root->right, root->data);
            return root;
        }
    }
    else if(key<root->data)
    {
        root->left = deleteANode(root->left , key);
        return root;
    }
    else
    {
        root->right = deleteANode(root->right ,key);
        return root;
    }
}

node *selfbalancedBST(int arr[], int s, int e)
{
    if(s>e)
    {
        return NULL;
    }
    int mid = (s+e)/2;
    node *root = new node(arr[mid]);
    root->left = selfbalancedBST(arr, s, mid-1);
    root->right = selfbalancedBST(arr, mid+1, e);
    return root;
}

//convert BST to LL //do not creat new LL
class LLPair
{
    public:
    node*head;
    node*tail;
};

LLPair tree2LL(node*root)
{
    //base case
    LLPair l;
    if(root==NULL){
        l.head = l.tail = NULL;
        return l;
    }
    if(root->left == NULL and root->right == NULL){
        l.head = l.tail = root;
        return l;
    }
    //Rec case
    if(root->left!=NULL and root->right == NULL){
        LLPair LeftLL = tree2LL(root->left);
        LeftLL.tail->right = root;
        l.head = LeftLL.head;
        l.tail = root;
        return l;
    }
    else if(root->right!=NULL and root->left==NULL){
        LLPair rightLL = tree2LL(root->right);
        root->right = rightLL.head;
        l.head = root;
        l.tail = rightLL.tail;
        return l;
    }
    else{
        LLPair LeftLL = tree2LL(root->left);
        LLPair rightLL = tree2LL(root->right);
        LeftLL.tail->right = root;
        root->right = rightLL.head;
        l.head = LeftLL.head;
        l.tail = rightLL.tail;
        return l;
    }
}

node* preToBST(int *pre,int *in,int s,int e)
{
    static int x = 0;
    if(s>e){
        return NULL;
    }
    node*root = new node(pre[x]);
    //search the index of x in preorder
    int j;
    for(j=s;j<=e;j++){
        if(in[j]==pre[x]){
            break;
        }
    }
    x++;
    //j-->index of pre[x] in inorder
    root->left = preToBST(pre,in,s,j-1);
    root->right  = preToBST(pre,in,j+1,e);
    return root;

}

int countBST(int n)
{
    if(n==0)
    {
        return 1;
    }
    int ans =0;
    for(int i=1; i<=n; i++)
    {
        ans += countBST(i-1)*countBST(n-i);
    }
    return ans;
}

int main() 
{
    node *root = takeinput();
    cout<<"level wise Orignal BST "<<endl;
    printlevelwise(root);
    cout<<endl;

    cout<<"element search ="
    cout<<search(root, 15);
    cout<<endl;
    
    
    root = deleteANode(root , 8);
    root = deleteANode(root , 15);
    root = deleteANode(root , 10);
    cout<<"after deletion "<<endl;
    printlevelwise(root);
    
    //Creat selfbalancedBST from array;
    int arr[7] = {1,3,5,7,9,10,11};
    int n= 7;
    
    node *root = selfbalancedBST(arr,0,n-1);
    printlevelwise(root);
    
    //BST to LL
    LLPair l = tree2LL(root);
    node* temp = l.head;
    while(temp!=NULL){
        cout<<temp->data<<" ";
        temp = temp->right;
    }
    
    
    
    int in_arr[7] = {1,3,5,7,9,10,11};
    int pre_arr[7] = {7,3,1,5,10,9,11};
    int n =7;
    node *root1 = preToBST(pre_arr, in_arr, 0,n-1);
    printlevelwise(root1);
    
    
    cout<<"No of BST Possible = "<<countBST(3);
    
    return 0;
}


-----------------------------------------------------------

//Left View

#include<bits/stdc++.h>
using namespace std;

class node 
{
public:
	int data;
	node* left;
	node* right;
	node(int d) 
	{
		data = d;
		left = NULL;
		right = NULL;
	}
};

node* build_tree() 
{
	int d;
	cin>>d;
	if(d == -1) 
	{
		return NULL;
	}
	node* n1 = new node(d);
	n1->left = build_tree();
	n1->right = build_tree();
	return n1;
}

void left_view(node* root) 
{
	queue<node*> q;
	q.push(root);
	q.push(NULL);
	node* p = NULL;
	while(!q.empty()) 
	{
		node* x = q.front();
		if(x!=NULL) 
		{
			if(p==NULL) 
			{
				cout<<x->data<<" ";
			}
			p = x;
			if(x->left!=NULL)
			q.push(x->left);

			if(x->right!=NULL)
			q.push(x->right);
			q.pop();
		}
		else 
		{
			p = NULL;
			q.pop();
			if(!q.empty()) 
			{
				q.push(NULL);
			}
		}
	}
}

int main() 
{
	node* root = build_tree();
	left_view(root);
	return 0;
}


-----------------------------------------------------------

//