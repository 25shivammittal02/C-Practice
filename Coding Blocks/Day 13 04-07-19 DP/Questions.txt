//Wines Problem
#include<iostream>
#include<bits/stdc++.h>
using namespace std;

int wines(int a[], int i, int j, int y)
{
	if(i>j)
	{
		return 0;
	}

	int op1 = a[i]*y + wines(a,i+1,j,y+1);
	int op2 = a[j]*y + wines(a,i,j-1,y+1);
	return max(op1,op2);
}

int main()
{
	int a[5] = {2,3,5,1,4};
	int n= 5;
	cout<<"Max Profit in selling Wine bottles = "<<wines(a,0,n-1,1)<<endl;
	return 0;
}

---------------------------------------------------
//Knapsack01



---------------------------------------------------
//Longest Common Subsequence
#include<iostream>
#include<bits/stdc++.h>
using namespace std;

int main()
{
	string s1,s2;
	cin>>s1>>s2;
	int n= s1.length();
	int m = s2.length();
	int dp[n][m]= {0};
	vector<char> v;
	for(int j=0;j<m;j++)
	{
		if(s1[0]!=s2[j])
		{
			dp[0][j]=0;
		}
		else
		{
			for(int k=j;k<m;k++)
			{
				dp[0][k]=1;
			}
			break;
		}
	}
	
	for(int i=0;i<n;i++)
	{
		if(s1[i]!=s2[0])
		{
			dp[i][0]=0;
		}
		else
		{
			v.push_back(s1[i]);
			for(int k=i;k<n;k++)
			{
				dp[k][0]=1;
			}
			break;
		}
	}
	
	for(int i=1;i<n;i++)
	{
		for(int j=1;j<m;j++)
		{
			if(s1[i]==s2[j])
			{
				v.push_back(s1[i]);
				dp[i][j] = max(dp[i-1][j] , dp[i][j-1]) +1;
			}
			else
			{
				dp[i][j] = max(dp[i-1][j] , dp[i][j-1]);
			}
		}
	}
	for(int l=0;l<n;l++)
	{
		for(int k=0;k<m;k++)
		{
			cout<<dp[l][k]<<" ";
		}
		cout<<endl;
	}

	cout<<"length of Common string found = "<<dp[n-1][m-1]<<endl;
	for(auto i:v)
	{
		cout<<i;
	}
	return 0;
}

---------------------------------------------------
//