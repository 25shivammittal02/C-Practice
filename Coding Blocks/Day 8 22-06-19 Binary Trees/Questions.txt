/*
Binary Tress
everynode has atmost 2 children-> binary tree
leaf node-> no child
starting node-> root, keet its address.
ancestors-> nodes above it
height of tree-> no of nodes along the longest path
depth of node -> lies at which level (iske upar kitne arrows hai?)
tree is special case of graph

BST -> left is always smaller than right


*/

//1 2 4 -1 -1 -1 3 5  8 -1 -1 -1 6 -1 -1

//Binary tree
#include <iostream>
#include<queue>
#include<stack>
#include<bits/stdc++.h>
using namespace std;

class node
{
    public:
    int data;
    node *left;
    node *right;
    node (int d)
    {
        data = d;
        left = NULL;
        right = NULL;
    }
};

node *buildTree()
{
    int d;
    cin>>d;

    if(d == -1)
    {
        return NULL;
    }
    node *root = new node(d);
    root->left = buildTree();
    root->right = buildTree();
    return root;
}

void printPreorderTree(node *root)
{
    if(root==NULL)
    {
        return;
    }
    cout<<root->data<<" ";
    printPreorderTree(root->left);
    printPreorderTree(root->right);
}

void printInorderTree(node *root)
{
    if(root==NULL)
    {
        return;
    }
    printInorderTree(root->left);
    cout<<root->data<<" ";
    printInorderTree(root->right);
}

void printPostorderTree(node *root)
{
    if(root==NULL)
    {
        return;
    }
    printPostorderTree(root->left);
    printPostorderTree(root->right);
    cout<<root->data<<" ";
}

void printAtLevel(node *root, int k) //O(n)
{
    if(root==NULL) //if a node has no right or no left
    {
        return;
    }
    if(k==0)
    {
        cout<<root->data<<" ";
        return;
    }
    printAtLevel(root->left , k-1);
    printAtLevel(root->right, k-1);
}

int height(node *root) //o(n);
{
    if(root==NULL)
    {
        return 0;
    }
    int h1 = height(root->left);
    int h2 = height(root->right);
    return max(h1,h2) +1;
}

void printlevelwise(node *root) //O(n^2)
{
    int level = height(root);
    for(int i=0; i<level; i++) //O(n)
    {
        printAtLevel(root,i); //O(n)
        cout<<endl;
    }
}

//count nodes
int countNodes(node *root)
{
    if(root==NULL)
    {
        return 0;
    }
    return 1+ countNodes(root->left) + countNodes(root->right);
}

//sum of nodes
int sumOfNodes(node*root)
{
    if(root==NULL)
    {
        return 0;
    }
    return root->data + sumOfNodes(root->left) + sumOfNodes(root->right);
}

//replace every node by sum of descendents, except leaf
void replaceBySumOfDescendents(node *&root)
{
    if(root==NULL)
    {
        return;
    }
    if(root->left == NULL and root->right==NULL)
    {
        return;
    }
    root->data = sumOfNodes(root->left) + sumOfNodes(root->right);
    replaceBySumOfDescendents(root->left);
    replaceBySumOfDescendents(root->right);
}

int replaceNodesBySum(node *root)
{
    if(root==NULL)
    {
        return 0;
    }
    if(root->left == NULL and root->right==NULL)
    {
        return root->data;
    }
    int temp = root->data;
    root->data = replaceNodesBySum(root->left) + replaceNodesBySum(root->right);
    return root->data + temp;
}

//level Order Print
void levelOrder(node *root)
{
    queue<node*> q;
    q.push(root);
    q.push(NULL);

    while(!q.empty())
    {
        node *f = q.front();
        if(f==NULL)
        {
            q.pop();
            cout<<endl;
            if(!q.empty())
            {
                q.push(NULL);
            }
        }
        else
        {
            q.pop();

            cout<<f->data<<" ";
            if(f->left!=NULL)
            {
                q.push(f->left);
            }
            if(f->right !=NULL)
            {
                q.push(f->right);
            }
        }
    }
}

//Make Tree Level wise Input
node *buildTreeLevelWise()
{
    queue<node*> q;
    int d;
    cin>>d;
    node *root = new node(d);
    q.push(root);
    while(!q.empty())
    {
        int c1, c2;
        cin>>c1>>c2;
        node *f = q.front();
        q.pop();
        if(c1!=-1)
        {
            f->left = new node(c1);
            q.push(f->left);
        }
        if(c2!=-1)
        {
            f->right = new node(c2);
            q.push(f->right);
        }
    }
    return root;
}

//Diameter of tree
int DiameterOfTree(node *root)
{
    if(root == NULL)
    {
        return 0;
    }
    int op1 = height(root->left) + height(root->right);
    int op2 = max( DiameterOfTree(root->left), DiameterOfTree(root->right) );
    return max(op1,op2);
}

class MyPair
{
    public:
    int height;
    int diameter;
};

MyPair diameteroptimised(node *root)
{
    MyPair p;
    if(root==NULL)
    {
        p.height =p.diameter =0;
        return p;
    }

    MyPair left = diameteroptimised(root->left);
    MyPair right = diameteroptimised(root->right);

    p.height = max(left.height, right.height) +1;
    p.diameter = max(max(left.diameter,right.diameter) , (left.height+right.height));
    return p;
}

//tree is balanced or not
class HBPair
{
    public:
    int height;
    bool balance;
};

HBPair isheightBalanced(node *root)
{
    HBPair p;
    if(root==NULL)
    {
        p.height =0;
        p.balance = true;
        return p;
    }
    HBPair left = isheightBalanced(root->left);
    HBPair right = isheightBalanced(root->right);

    if((abs(left.height - right.height) <=1) and (left.balance and right.balance))
    {
        p.balance = true;
    }
    else
    {
        p.balance = false;
    }
    p.height = max(left.height , right.height) +1;
    return p;
}

//maximum sum, with constraints-> parent n child should not be includedif a node is taken
class PairIE
{
    public:
    int inc;
    int exc;
};

PairIE maxSum(node *root)
{
    PairIE p;
    if(root==NULL)
    {
        p.inc = p.exc = 0;
        return p;
    }
    PairIE L, R;
    L= maxSum(root->left);
    R= maxSum(root->right);

    p.inc = root->data + L.exc + R.exc;
    p.exc = max(L.inc, L.exc) + max(R.inc, R.exc);
    return p;
}

//Root to leaf Path
void root2leaf(node *root, vector<int> &v)
{
    if(root==NULL)
    {
        return;
    }
    if(root->left == NULL and root->right == NULL)
    {
        v.push_back(root->data);
        //print vector
        for(int x:v)
        {
            cout<<x<<"->";
        }
        cout<<endl;
        v.pop_back();
        return;
    }
    //rec
    v.push_back(root->data);
    root2leaf(root->left ,v);
    root2leaf(root->right ,v);
    v.pop_back();
    return;
}

void mirror(node *root)
{
    if(root==NULL)
    {
        return;
    }
    swap(root->left, root->right);
    mirror(root->left);
    mirror(root->right);
    return;
    
}

int main() 
{
    node *root = buildTree();
    
    // node *root = buildTreeLevelWise(); //level wise input

    cout<<"Tree PreOrder-> ";
    printPreorderTree(root);
    cout<<endl;
    /*
    cout<<"Tree InOrder-> ";
    printInorderTree(root);
    cout<<endl;
    
    cout<<"Tree PostOrder-> ";
    printPostorderTree(root);
    cout<<endl;
    
    cout<<"Tree at level 2 ->";
    printAtLevel(root, 2);
    cout<<endl;
    
    cout<<"Complete Tree levelwise ->"<<endl;
    printlevelwise(root);
    
    int cnt = countNodes(root);
    cout<<"No of nodes = "<<cnt<<endl;
    
    int sum = sumOfNodes(root);
    cout<<"Sum of nodes = "<<sum<<endl;
    
    replaceBySumOfDescendents(root);
    cout<<"PreOrder Tree after replacing by sum of descendents(I) ->";
    printPreorderTree(root);
    cout<<endl;
    
    int sum = replaceNodesBySum(root);
    cout<<"PreOrder Tree after replacing by sum of descendents (II) ->";
    printPreorderTree(root);
    cout<<endl;
    
    cout<<"Level order print of tree ->"<<endl;
    levelOrder(root);
    cout<<endl;
    
    int dia = DiameterOfTree(root);
    cout<<"Diameter Of tree = "<<dia<<endl;
    
    MyPair p1 = diameteroptimised(root);
    cout<<"Diameter Of tree = "<<p1.diameter<<endl;

    HBPair p1 = isheightBalanced(root);
    cout<<"Tree is balanced/un-balanced ="<<p1.balance<<endl;

    PairIE p = maxSum(root);
    cout<<"Max Sum = "<<max(p.inc , p.exc)<<endl;
    
    vector<int> v;
    cout<<"root to tree traversal ="<<endl;
    root2leaf(root, v);
    
    cout<<"Mirror of tree = ";
    mirror(root);
    printPreorderTree(root);
    cout<<endl;
    */
    
    
    return 0;
}